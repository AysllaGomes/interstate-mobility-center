{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport PropTypes from \"prop-types\";\nimport { useState, useRef } from \"react\";\nimport defaultMessages from \"./defaultMessages\";\nimport defaultRules from \"./defaultRules\";\n\nvar useValidation = function useValidation(props) {\n  var _props$state = props.state,\n      state = _props$state === void 0 ? {} : _props$state;\n  var deviceLocale = props.deviceLocale || \"en\";\n  var baseRules = props.rules || defaultRules;\n  var messages = props.messages || defaultMessages;\n  var labels = props.labels || {};\n  var errors = useRef([]);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      internalErrors = _useState2[0],\n      setInternalErrors = _useState2[1];\n\n  var validate = function validate(fields) {\n    _resetErrors();\n\n    for (var _i = 0, _Object$keys = Object.keys(state); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      var rules = fields[key];\n\n      if (rules) {\n        _checkRules(key, rules, state[key]);\n      }\n    }\n\n    return isFormValid();\n  };\n\n  var _checkRules = function _checkRules(fieldName, rules, value) {\n    if (!value && !rules.required) {\n      return;\n    }\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(rules); _i2 < _Object$keys2.length; _i2++) {\n      var key = _Object$keys2[_i2];\n      var isRuleFn = typeof baseRules[key] == \"function\";\n      var isRegExp = baseRules[key] instanceof RegExp;\n\n      if (isRuleFn && !baseRules[key](rules[key], value) || isRegExp && !baseRules[key].test(value)) {\n        _addError(fieldName, key, rules[key], isRuleFn);\n      }\n    }\n  };\n\n  var _addError = function _addError(fieldName, rule, value, isFn) {\n    var name = labels[fieldName];\n    value = rule == \"minlength\" ? value - 1 : value;\n    var errMsg = messages[deviceLocale][rule].replace(\"{0}\", name || fieldName).replace(\"{1}\", value);\n\n    var _errors$current$filte = errors.current.filter(function (err) {\n      return err.fieldName === fieldName;\n    }),\n        _errors$current$filte2 = _slicedToArray(_errors$current$filte, 1),\n        error = _errors$current$filte2[0];\n\n    if (error) {\n      var index = errors.current.indexOf(error);\n      error.messages.push(errMsg);\n      error.failedRules.push(rule);\n      errors.current[index] = error;\n    } else {\n      errors.current.push({\n        fieldName: fieldName,\n        failedRules: [rule],\n        messages: [errMsg]\n      });\n      setInternalErrors(errors.current);\n    }\n  };\n\n  var _resetErrors = function _resetErrors() {\n    errors.current = [];\n    setInternalErrors([]);\n  };\n\n  var isFieldInError = function isFieldInError(fieldName) {\n    return internalErrors.filter(function (err) {\n      return err.fieldName === fieldName;\n    }).length > 0;\n  };\n\n  var isFormValid = function isFormValid() {\n    var _errors$current;\n\n    return ((_errors$current = errors.current) == null ? void 0 : _errors$current.length) == 0;\n  };\n\n  var getFailedRules = function getFailedRules() {\n    var failedRulesPerField = {};\n\n    for (var index = 0; index < internalErrors.length; index++) {\n      var error = internalErrors[index];\n      failedRulesPerField[error.fieldName] = error.failedRules;\n    }\n\n    return failedRulesPerField;\n  };\n\n  var getFailedRulesInField = function getFailedRulesInField(fieldName) {\n    var foundError = internalErrors.find(function (err) {\n      return err.fieldName === fieldName;\n    });\n\n    if (!foundError) {\n      return [];\n    }\n\n    return foundError.failedRules;\n  };\n\n  var getErrorMessages = function getErrorMessages() {\n    var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\\n\";\n    return internalErrors.map(function (err) {\n      return err.messages.join(separator);\n    }).join(separator);\n  };\n\n  var getErrorsInField = function getErrorsInField(fieldName) {\n    var foundError = internalErrors.find(function (err) {\n      return err.fieldName === fieldName;\n    });\n\n    if (!foundError) {\n      return [];\n    }\n\n    return foundError.messages;\n  };\n\n  return {\n    validate: validate,\n    isFormValid: isFormValid,\n    isFieldInError: isFieldInError,\n    getFailedRules: getFailedRules,\n    getFailedRulesInField: getFailedRulesInField,\n    getErrorMessages: getErrorMessages,\n    getErrorsInField: getErrorsInField\n  };\n};\n\nuseValidation.propTypes = {\n  deviceLocale: PropTypes.string,\n  rules: PropTypes.object,\n  messages: PropTypes.object,\n  labels: PropTypes.object\n};\nuseValidation.defaultProps = {\n  deviceLocale: \"en\",\n  rules: defaultRules,\n  messages: defaultMessages,\n  labels: {}\n};\nexport default useValidation;","map":{"version":3,"sources":["C:/Users/Ettore/Desktop/TCC/teste/interstate-mobility-center/cmi-app-cli/node_modules/react-native-form-validator/useValidation.js"],"names":["PropTypes","useState","useRef","defaultMessages","defaultRules","useValidation","props","state","deviceLocale","baseRules","rules","messages","labels","errors","internalErrors","setInternalErrors","validate","fields","_resetErrors","Object","keys","key","_checkRules","isFormValid","fieldName","value","required","isRuleFn","isRegExp","RegExp","test","_addError","rule","isFn","name","errMsg","replace","current","filter","err","error","index","indexOf","push","failedRules","isFieldInError","length","getFailedRules","failedRulesPerField","getFailedRulesInField","foundError","find","getErrorMessages","separator","map","join","getErrorsInField","propTypes","string","object","defaultProps"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport PropTypes from \"prop-types\";\nimport { useState, useRef } from \"react\";\nimport defaultMessages from \"./defaultMessages\";\nimport defaultRules from \"./defaultRules\";\n\nconst useValidation = (props) => {\n  const { state = {} } = props;\n  // array to store error on each fields\n  // ex:\n  // [{ fieldName: \"name\", messages: [\"The field name is required.\"] }]\n  // Retrieve props\n  const deviceLocale = props.deviceLocale || \"en\"; // ex: en, fr\n  const baseRules = props.rules || defaultRules; // rules for Validation\n  const messages = props.messages || defaultMessages;\n  const labels = props.labels || {};\n  const errors = useRef([]);\n  const [internalErrors, setInternalErrors] = useState([]);\n\n  /*\n   * Method validate to verify if each children respect the validator rules\n   * Fields example (Array) :\n   * fields = {\n   *  input1: {\n   *    required:true,\n   *     numbers:true,\n   *     maxLength:5\n   *  }\n   *}\n   */\n  const validate = (fields) => {\n    // Reset errors\n    _resetErrors();\n    // Iterate over inner state\n    for (const key of Object.keys(state)) {\n      // Check if child name is equals to fields array set up in parameters\n      const rules = fields[key];\n      if (rules) {\n        // Check rule for current field\n        _checkRules(key, rules, state[key]);\n      }\n    }\n    return isFormValid();\n  };\n\n  // Method to check rules on a spefific field\n  const _checkRules = (fieldName, rules, value) => {\n    if (!value && !rules.required) {\n      return; // if value is empty AND its not required by the rules, no need to check any other rules\n    }\n    for (const key of Object.keys(rules)) {\n      const isRuleFn = typeof baseRules[key] == \"function\";\n      const isRegExp = baseRules[key] instanceof RegExp;\n      if (\n        (isRuleFn && !baseRules[key](rules[key], value)) ||\n        (isRegExp && !baseRules[key].test(value))\n      ) {\n        _addError(fieldName, key, rules[key], isRuleFn);\n      }\n    }\n  };\n\n  // Add error\n  // ex:\n  // [{ fieldName: \"name\", messages: [\"The field name is required.\"] }]\n  const _addError = (fieldName, rule, value, isFn) => {\n    const name = labels[fieldName];\n    value = rule == \"minlength\" ? value - 1 : value;\n    const errMsg = messages[deviceLocale][rule]\n      .replace(\"{0}\", name || fieldName)\n      .replace(\"{1}\", value);\n    let [error] = errors.current.filter((err) => err.fieldName === fieldName);\n    // error already exists\n    if (error) {\n      // Update existing element\n      const index = errors.current.indexOf(error);\n      error.messages.push(errMsg);\n      error.failedRules.push(rule);\n      errors.current[index] = error;\n    } else {\n      // Add new item\n      errors.current.push({\n        fieldName,\n        failedRules: [rule],\n        messages: [errMsg],\n      });\n      setInternalErrors(errors.current);\n    }\n  };\n\n  // Reset error fields\n  const _resetErrors = () => {\n    errors.current = [];\n    setInternalErrors([]);\n  };\n\n  // Method to check if the field is in error\n  const isFieldInError = (fieldName) => {\n    return (\n      internalErrors.filter((err) => err.fieldName === fieldName).length > 0\n    );\n  };\n\n  const isFormValid = () => {\n    return errors.current?.length == 0;\n  };\n\n  // Return an object where the keys are the field names and the value is an array with the rules that failed validation\n  const getFailedRules = () => {\n    let failedRulesPerField = {};\n    for (let index = 0; index < internalErrors.length; index++) {\n      let error = internalErrors[index];\n      failedRulesPerField[error.fieldName] = error.failedRules;\n    }\n    return failedRulesPerField;\n  };\n\n  // Return the rules that failed validation for the given field\n  const getFailedRulesInField = (fieldName) => {\n    const foundError = internalErrors.find(\n      (err) => err.fieldName === fieldName\n    );\n    if (!foundError) {\n      return [];\n    }\n    return foundError.failedRules;\n  };\n\n  // Concatenate each error messages\n  const getErrorMessages = (separator = \"\\n\") => {\n    return internalErrors\n      .map((err) => err.messages.join(separator))\n      .join(separator);\n  };\n\n  // Method to return errors on a specific field\n  const getErrorsInField = (fieldName) => {\n    const foundError = internalErrors.find(\n      (err) => err.fieldName === fieldName\n    );\n    if (!foundError) {\n      return [];\n    }\n    return foundError.messages;\n  };\n\n  return {\n    validate,\n    isFormValid,\n    isFieldInError,\n    getFailedRules,\n    getFailedRulesInField,\n    getErrorMessages,\n    getErrorsInField,\n  };\n};\n\nuseValidation.propTypes = {\n  deviceLocale: PropTypes.string, // Used for language locale\n  rules: PropTypes.object, // rules for validations\n  messages: PropTypes.object, // messages for validation errors\n  labels: PropTypes.object, // labels for validation messages\n};\n\nuseValidation.defaultProps = {\n  deviceLocale: \"en\",\n  rules: defaultRules,\n  messages: defaultMessages,\n  labels: {},\n};\n\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}